var fs = require("fs");
var dateFormat = require('dateformat');
let port = 2019;
if (port == null || port == "") {
  port = 2019;
}
var express = require("express"),
	app = express(),
	http = require("http").Server(app).listen(port),
	upload = require("express-fileupload");
app.use(upload());
//console.log("Server Started! At port "+port);
var query_string = require('querystring');

const mongodb = require('mongodb').MongoClient;
const assert = require('assert');

// constants global
var supportedfiletypes = ['jpg','jpeg','png'];
var activeUsers = [];
// Connection URL
const url = 'mongodb+srv://admin:admin@cluster0-jd2q4.mongodb.net/test?retryWrites=true&w=majority'; 
// Database Name
const dbName = 'ahb_database';
const userCollection = 'users';
const doctorCollection = 'doctors';
const errorMessageKey = "Error";
const sucessMessageKey = "Success";
 



//ROUTERS
app.get("/login", function(req,res){
	res.sendFile(__dirname+"/login.html");
});

app.post("/auth", function(req,res){
	
	var req_body = '';
	req.on('data', function (data) {
		req_body += data;

		// If the POST data is too much then destroy the connection to avoid attack.
		// 1e6 === 1 * Math.pow(10, 6) === 1 * 1000000 ~~~ 1MB
		if (req_body.length > 1e6)
			req.connection.destroy();
	});

	req.on('end', function () {

	   // Parse post data from request body, return a JSON string contains all post data.
		var post_data = query_string.parse(req_body);
		
		// Get user name from post data.
		var userid = post_data["userid"];

		// Get password from post data.
		var pass = post_data["pass"];
		authenticateUser(userid,pass,res);
	});
});

app.post("/doctor/auth", function(req,res){
	
	var req_body = '';
	req.on('data', function (data) {
		req_body += data;

		// If the POST data is too much then destroy the connection to avoid attack.
		// 1e6 === 1 * Math.pow(10, 6) === 1 * 1000000 ~~~ 1MB
		if (req_body.length > 1e6)
			req.connection.destroy();
	});

	req.on('end', function () {

	   // Parse post data from request body, return a JSON string contains all post data.
		var post_data = query_string.parse(req_body);
		
		// Get user name from post data.
		var userid = post_data["userId"];

		// Get password from post data.
		var pass = post_data["pass"];
		authenticateDoctor(userid,pass,res);
	});
});



// handle logout
app.get("/logout/:userid", function(req,res){
	var userid = req.params.userid;
	//console.log(userid);
	if(activeUsers.indexOf(userid)< 0)
		res.send("Success");
	else{
		activeUsers.splice(activeUsers.indexOf(userid),1);
		res.send("Success");
	}
});

app.get("/doctorlogout/:doctorid", function(req,res){
	var doctorid = req.params.doctorid;
	doctorLogoutFromServer(res,doctorid,function(err){
		if(err){
			res.send(errorMessageKey);
		}
	});
});

//get all repors of a user
app.get("/getAllReports/:userid",function(req,res){
	
	const userid = req.params.userid;
	if(validateAccess(req)){
		getAllReportsOfUser(userid,res,function(err){
			if(err){
				//console.log("1111")
				res.send("Error");
			}
			
		});
	}
	else{
		res.send("Logout");
	}
});

//get all repors of a doctor
app.get("/getAllDoctorReports/:doctorid",function(req,res){
	
	const doctorid = req.params.doctorid;
	getAllReportsOfDoctor(doctorid,res,function(err){
		if(err){
			res.send("Error");
		}
	});
});


app.get("/searchAssignedReports/:doctorid",function(req,res){
	
	const doctorid = req.params.doctorid;
	getAllAssignedReportsOfDoctor(doctorid,res,function(err){
		if(err){
			res.send("Error");
		}
	});
});

app.get("/unassignReports/:doctorid",function(req,res){
	
	const doctorid = req.params.doctorid;
	unassignAllReportsOfDoctor(doctorid,res,function(err){
		if(err){
			res.send("Error");
		}
	});
});



app.get("/getReportImage/:reportid/:userid",function(req,res){
	
	const reportid = req.params.reportid;
	if(validateAccess(req)){
		getReportImage(reportid,res,function(err){
			if(err){
				//console.log("1111");
				res.send("Error");
			}
			
		});
	}
	else{
		res.send("Logout");
	}
	
});



app.get("/getReportImage/:reportid/",function(req,res){
	
	const reportid = req.params.reportid;
	getReportImage(reportid,res,function(err){
		if(err){
			//console.log("1111");
			res.send("Error");
		}
		
	});
	
});

app.post("/uploadreport/:userid", function(req,res){
	//console.log(req.headers["content-type"]);
	var userid = req.params.userid;
	var req_body = '';
	req.on('data', function (data) {
		req_body += data;

		// If the POST data is too much then destroy the connection to avoid attack.
		// 1e6 === 1 * Math.pow(10, 6) === 1 * 1000000 ~~~ 1MB
		if (req_body.length > 1e8){
			req.connection.destroy();
			res.send("LargePostData");
		}
	});

	req.on('end', function () {

	   // Parse post data from request body, return a JSON string contains all post data.
		var post_data = query_string.parse(req_body);
		
		uploadReport(userid,post_data,function(err, client) {
			assert.equal(err, null);
			res.send("success");
		});
	});
});


app.post("/doctor/submitdiagnosisreport/:reportId", function(req,res){
	//console.log(req.headers["content-type"]);
	var reportId = req.params.reportId;
	var req_body = '';
	req.on('data', function (data) {
		req_body += data;
		if (req_body.length > 1e8){
			req.connection.destroy();
			res.send("LargePostData");
		}
	});

	req.on('end', function () {
		var post_data = query_string.parse(req_body);
		
		submitDoctorReport(reportId,post_data,function(err, client) {
			if(err){
				res.send("Error");
				//console.log(err);
			}
			else
				res.send("success");
		});
	});
});


app.get("/validatedoctor/:doctorid", function(req,res){
	validateDoctors(req,res,function(err){
		if(err){
			res.send("Error");
		}
	});
});


// handle lock Report
app.get("/lockReport/:reprotid/:lock", function(req,res){
	var reprotid = req.params.reprotid;
	var lock = req.params.lock;
	lockReport(reprotid,lock,function(err){
		if(err){
			res.send("Error");
		}else{
			res.send(sucessMessageKey);
		}
	});
});





// API's 

function authenticateUser(userid,pass,res){
	//console.log(userid+" and "+pass);
	
	// Use connect method to connect to the server
	mongodb.connect(url,{useUnifiedTopology: true , useNewUrlParser: true}, function(err, client) {
		assert.equal(null, err);
		////console.log("Connected successfully to db server");
		const db = client.db(dbName);
		const collection = db.collection(userCollection);
		collection.find({userid: userid, password: pass}).toArray(function(err, docs) {
			assert.equal(err, null);
			client.close();
			if(docs.length > 0){
				activeUsers.push(userid);
				res.send(docs[0]);
				//res.sendFile(__dirname+"/index.html");
			}
			else{
				res.send("Error");
			}
		});
	});
}


function authenticateDoctor(doctorid,pass,res){
	//console.log(doctorid+" and "+pass);
	
	// Use connect method to connect to the server
	mongodb.connect(url,{useUnifiedTopology: true , useNewUrlParser: true}, function(err, client) {
		assert.equal(null, err);
		////console.log("Connected successfully to db server");
		const db = client.db(dbName);
		const collection = db.collection(doctorCollection);
		collection.find({doctorId: doctorid, password: pass}).toArray(function(err, docs) {
			assert.equal(err, null);
			
			if(docs.length > 0){
				var myquery = { doctorId: doctorid };
				var newvalues = { $set: {loginStatus: "Success"} };
				collection.updateOne(myquery, newvalues, function(err, result) {
					assert.equal(err, null);
					client.close();
					res.send(docs[0]);
					//console.log(" Collection updated ");
					
				});
			}
			else{
				res.send("Error");
			}
		});
	});
}


function uploadReport(userid,post_data,callback){
	var fullImage = post_data["fullImage"];
	var infectedImage = post_data["infectedImage"];
	var stoolImage = post_data["stoolImage"];
	var animalType = post_data["animalType"];
	var animalAge = post_data["animalAge"];
	var otherSymptoms = post_data["otherSymptoms"];
	var reportName = post_data["reportName"];
	var reportDate=dateFormat(new Date(), "mm-dd-yyyy");
	mongodb.connect(url,{useUnifiedTopology: true , useNewUrlParser: true}, function(err, client) {
		if(err) return callback(err);
		//console.log("Connected successfully to db server");
		const db = client.db(dbName);
		const reports_collection = db.collection('report_collection');
		generateReportSequence(userid,db,function(err,reprotid){
			var myobj = {};
			if(err){
				return callback(err);
				client.close();
			}
			else{
				myobj = {reportId : reportid,reportName : reportName,userid : userid,animalType : animalType,animalAge : animalAge, diseaseName : "",medicineRecommended : "",
				mainImagePath : fullImage,infectedImagePath : infectedImage, stoolImagePath : stoolImage,otherSymptoms : otherSymptoms,reportDate : reportDate,status : "PENDING"}
				reports_collection.insertOne(myobj,function(err){
					if(err) return callback(err);
					client.close();
				});
				client.close();
				return callback(err,reportid);
			}
		});
	});
}

function submitDoctorReport(reportId,post_data,callback){
	var reportDate=dateFormat(new Date(), "mm-dd-yyyy");
	var diseaseName = post_data["diseaseName"];
	var medicineRecommended = post_data["medicineRecommended"];
	var doctorAdvice = post_data["doctorAdvice"];
	var doctorId = post_data["doctorId"];
	
	mongodb.connect(url,{useUnifiedTopology: true , useNewUrlParser: true}, function(err, client) {
		if(err) return callback(err);
		const db = client.db(dbName);
		const reports_collection = db.collection('report_collection');
		const doctor_collection = db.collection(doctorCollection);
		const doctors = db.collection(doctorCollection);
		var myobj = {};
		var myquery = {reportId : reportId};
		myobj = { $set: {diseaseName : diseaseName,medicineRecommended : medicineRecommended,doctorSuggestion : doctorAdvice,
		teatedByDcotorId : doctorId,isAssigned : "false",assignedDoctorId : "",status : "GENERATED"} };
		reports_collection.updateOne(myquery,myobj,function(err){
			if(err) return callback(err);
			doctor_collection.updateOne({doctorId:doctorId},{"$inc" : {assignedReports: -1}},function(err,result){
				if (err) return callback(err);
				client.close();
				return callback(err);
			});
		});
	});
}

function getAllReportsOfUser(userid,res,callback){
	mongodb.connect(url,{useUnifiedTopology: true , useNewUrlParser: true}, function(err, client) {
		if (err) return callback(err);
		const db = client.db(dbName);
		const report_collection = db.collection('report_collection');
		report_collection.find({userid: userid}, { projection: { mainImagePath: 0, infectedImagePath: 0, stoolImagePath: 0 } }).toArray(function(err, docs) {
			if (err) throw err;
			client.close();
			res.send(docs); // <-- TODO
		});
	});
}

function getAllReportsOfDoctor(doctorid,res,callback){
	mongodb.connect(url,{useUnifiedTopology: true , useNewUrlParser: true}, function(err, client) {
		if (err) return callback(err);
		const db = client.db(dbName);
		const report_collection = db.collection('report_collection');
		report_collection.find({teatedByDcotorId: doctorid}, { projection: { mainImagePath: 0, infectedImagePath: 0, stoolImagePath: 0 } }).toArray(function(err, docs) {
			if (err) return callback(err);
			client.close();
			res.send(docs); // <-- TODO
		});
	});
}

function getAllAssignedReportsOfDoctor(doctorid,res,callback){
	mongodb.connect(url,{useUnifiedTopology: true , useNewUrlParser: true}, function(err, client) {
		if (err) return callback(err);
		//console.log("Connected successfully to db server");
		const db = client.db(dbName);
		const report_collection = db.collection('report_collection');
		report_collection.find({assignedDoctorId: doctorid}, { projection: { mainImagePath: 0, infectedImagePath: 0, stoolImagePath: 0 } }).toArray(function(err, docs) {
			if (err) return callback(err);
			client.close();
			res.send(docs); // <-- TODO
		});
	});
}

function unassignAllReportsOfDoctor(doctorid,res,callback){
	mongodb.connect(url,{useUnifiedTopology: true , useNewUrlParser: true}, function(err, client) {
		if (err) return callback(err);
		//console.log("Connected successfully to db server");
		const db = client.db(dbName);
		const report_collection = db.collection('report_collection');
		const doctor_collection = db.collection('report_collection');
		var myquery = { assignedDoctorId: doctorid };
		var newvalues = { $set: {assignedDoctorId: "",isAssigned:"false"} };
		
		report_collection.find({assignedDoctorId: doctorid}, { projection: { reportId : 1 } }).toArray(function(err, docs) {
			if (err) return callback(err);
			x = docs.length;
			report_collection.updateMany(myquery, newvalues, function(err, result) {
				if (err) return callback(err);
				doctor_collection.updateOne({doctorId:doctorid},{"$inc" : {assignedReports: -x}},function(err,result){
					if (err) return callback(err);
					client.close();
					res.send(sucessMessageKey);
				});
			});	
		});
	});
}

function getReportImage(reportid,res,callback){
	mongodb.connect(url,{useUnifiedTopology: true , useNewUrlParser: true}, function(err, client) {
		if (err) return callback(err);
		//console.log("Connected successfully to db server");
		const db = client.db(dbName);
		const report_collection = db.collection('report_collection');
		report_collection.find({reportId: reportid}, { projection: { mainImagePath: 1, infectedImagePath: 1, stoolImagePath: 1 } }).toArray(function(err, docs) {
			if (err) throw err;
			client.close();
			res.send(docs); // <-- TODO
		});
	});
}


function validateAccess(req){
	const userid = req.params.userid;
	if(activeUsers.indexOf(userid)<0){
		return false;
	}
	else
		return true;
}



function validateDoctors(req,res,callback){
	const doctorid = req.params.doctorid;
	
	mongodb.connect(url,{useUnifiedTopology: true , useNewUrlParser: true}, function(err, client) {
		if (err) return callback(err);
		//console.log("Connected successfully to db server");
		const db = client.db(dbName);
		const doctor_collection = db.collection(doctorCollection);
		doctor_collection.find({doctorId: doctorid}, { projection: { loginStatus: 1 } }).toArray(function(err, docs) {
			if (err) return callback(err);
			client.close();
			//console.log(docs[0]['loginStatus']);
			if(res != null)
				res.send(docs[0]['loginStatus']); // <-- TODO
		});
	});
	
}

function doctorLogoutFromServer(res,doctorid,callback){
	mongodb.connect(url,{useUnifiedTopology: true , useNewUrlParser: true}, function(err, client) {
		if (err) return callback(err);
		//console.log("Connected successfully to db server");
		const db = client.db(dbName);
		const doctors_collection = db.collection(doctorCollection);
		var myquery = { doctorId: doctorid };
		var newvalues = { $set: {loginStatus: ""} };
		doctors_collection.updateOne(myquery, newvalues, function(err, result) {
			if (err) return callback(err);
			client.close();
			res.send(sucessMessageKey);
		});
	});
}

function lockReport(reprotid,lock,callback){
	mongodb.connect(url,{useUnifiedTopology: true , useNewUrlParser: true}, function(err, client) {
		if (err) return callback(err);
		const db = client.db(dbName);
		const report_collection = db.collection('report_collection');
		var myquery = { reprotId: reprotid };
		var newvalues = { $set: {lock: lock} };
		report_collection.updateOne(myquery, newvalues, function(err, result) {
			if (err) return callback(err);
			client.close();
			return callback(err);
		});
	});
}


function generateReportSequence(userid,db,callback){
	var seq_collection = db.collection('gen_sequence_report');
	var reprotid = "-1";
	seq_collection.find({user_id: userid}).toArray(function(err, docs) {
		if (err) return callback(err);
		if(docs.length <= 0){
			reportid = userid+"1";
			myobj = {user_id : userid , seq :  1};
			seq_collection.insertOne(myobj,function(err) {
				if(err) return callback(err);
				//console.log("New sequence inserted.");
				return callback(err,reportid);
			});
		}
		else{
			var seq = parseInt(docs[0].seq);
			seq = seq+1;
			var seqs = seq.toString();
			reportid = userid+seqs;
			var myquery = { user_id: userid };
			var newvalues = { $set: {seq: seq} };
			seq_collection.updateOne(myquery, newvalues, function(err, result) {
				if (err) return callback(err);
				//console.log("Sequence updated.");
				return callback(err,reportid);
			});
		}
	});
}