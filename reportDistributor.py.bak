import schedule
import time
from pymongo import MongoClient
import math
from datetime import datetime

url = 'mongodb://admin:admin@cluster0-shard-00-00-jd2q4.mongodb.net:27017,cluster0-shard-00-01-jd2q4.mongodb.net:27017,cluster0-shard-00-02-jd2q4.mongodb.net:27017/test?ssl=true&replicaSet=Cluster0-shard-0&authSource=admin&retryWrites=true&w=majority'

statusPending = 'PENDING'
statusOnline = 'Online'
reportLimit = 5



def unassignReports(currtime,reportCollection,doctors):
	
	allAssignReports = reportCollection.find({"status":statusPending,"isAssigned":"true","lock":"false"},{"reportId" :1,"assignTime":1,"assignedDoctorId":1})
	
	for x in allAssignReports:
		assignTime = x["assignTime"]
		#assignTime = datetime.strptime(assignTime, '%Y-%m-%d %H:%M:%S.%f')
		diffinmin = round(((currtime-assignTime).seconds)/60)
		if(diffinmin > 1.5):
			print("Unassigned A Report")
			doctorId = x["assignedDoctorId"]
			reportCollection.update_one({"reportId" : x["reportId"]},{ "$set": { "assignedDoctorId" : "" ,"assignTime" : "","isAssigned":"false"}})
			doctors.update_one({"doctorId":doctorId},{"$inc" : {"assignedReports": -1}})


def distributeReports():
	
	totalVaccancy = 0
	ratio = 0
	totalReports = 0
	i=0
	doctorDetails = []
	
	client = MongoClient(url)
	dbName = "ahb_database"
	db = client[dbName]
	reportCollection = db['report_collection']
	doctors = db['doctors']

	
	currtime = datetime.now()
	unassignReports(currtime,reportCollection,doctors)
	
	availableDoctors = doctors.find({"assignedReports": {"$lt": reportLimit},"onlineStatus": statusOnline},{"doctorId":1,"assignedReports":1})
	availableReports = reportCollection.find({"status": statusPending,"isAssigned": "false"},{"reportId":1})
	
	
	totalReports = availableReports.count()
	#creates and 2d array with doctorid and no of vacant seats for a doctor.
	for x in availableDoctors:
		templist = [x["doctorId"],reportLimit-int(x["assignedReports"])]
		doctorDetails.append(templist)
		totalVaccancy = totalVaccancy+doctorDetails[i][1]
		i = i+1
		
	#print(totalReports)
	#print(totalVaccancy)
	if(totalVaccancy != 0):
		ratio = round(totalReports/totalVaccancy,5)
	
	if(ratio != 0):
		if(totalReports >= totalVaccancy):
			assignOneToEach(availableDoctors,availableReports,totalReports,doctorDetails,currtime,reportCollection,doctors)
		else:
			assignAccordingToProbablity(availableDoctors,availableReports,totalReports,doctorDetails,ratio,currtime,reportCollection,doctors)
	client.close()


# used when total reports is greater than or equal to total vaccancy
def assignOneToEach(availableDoctors,availableReports,totalReports,doctorDetails,currtime,reportCollection,doctors):
	i=0
	j=0
	doctorCount = availableDoctors.count()
	# iterates over reports and assign it to doctors

	for report in availableReports:
		breakwhilelopp = False
		while (not breakwhilelopp):
		
			if(j>= doctorCount):
				break
				
			if doctorDetails[j][1] > 0:
				assignReport(report["reportId"],doctorDetails[j][0],currtime,reportCollection,doctors)
				breakwhilelopp = True
				doctorDetails[j][1] = doctorDetails[j][1]-1
			else:
				j=j+1
		if(j>= doctorCount):
				break
		
# used when total reports is less than total vaccancy
# 
def assignAccordingToProbablity(availableDoctors,availableReports,totalReports,doctorDetails,ratio,currtime,reportCollection,doctors):
	i=0
	doctorCount = availableDoctors.count()
	
	# claculates how many reports a doctor can get based upon its prob. 
	while i < doctorCount:
		doctorDetails[i][1] = round(doctorDetails[i][1]*ratio*doctorCount)
		i=i+1
	
	i=0
	j=0
	# iterates over reports and assign it to doctors
	for report in availableReports:
		breakwhilelopp = False
		while (not breakwhilelopp):
		
			if(j>= doctorCount):
				break
				
			if doctorDetails[j][1] > 0:
				assignReport(report["reportId"],doctorDetails[j][0],currtime,reportCollection,doctors)
				breakwhilelopp = True
				doctorDetails[j][1] = doctorDetails[j][1]-1
			else:
				j=j+1
		if(j>= doctorCount):
				break

# Assigns doctorId to given reportId
def assignReport(reportId,doctorId,currtime,reportCollection,doctors):
	reportCollection.update_one({"reportId" : reportId},{ "$set": { "assignedDoctorId" : doctorId ,"assignTime":currtime,"isAssigned":"true"}})
	doctors.update_one({"doctorId":doctorId},{"$inc" : {"assignedReports": 1}})
	print("Assigned A Report")
	

distributeReports()
schedule.every(1).minutes.do(distributeReports)

while True:
	schedule.run_pending()
	time.sleep(1)